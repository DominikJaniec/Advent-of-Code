#!markdown

### 2024/day/1

https://web.archive.org/web/20241204172851/https://adventofcode.com/2024/day/1

(...), pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.

Within each pair, figure out how far apart the two numbers are; you'll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.

#!fsharp

let inputLines =
    """
    3   4
    4   3
    2   5
    1   3
    3   9
    3   3
    """.Split('\n')
    // System.IO.File.ReadAllLines("input.txt")

inputLines.Length

#!fsharp

let rowPattern =
    @"^\s*(?<l>\d+)\s+(?<r>\d+)\s*$"
    |> System.Text.RegularExpressions.Regex

let pairUp (line: string) =
    let matched = rowPattern.Match(line)
    match matched.Success with
    | false -> failwith "!!!"
    | true ->
        let extractNumber (gr: string) =
            matched.Groups[gr].Value
            |> int

        ( extractNumber "l"
        , extractNumber "r"
        )

let notEmpty =
    not << String.IsNullOrWhiteSpace

let numberPairs =
    inputLines
    |> Seq.where notEmpty
    |> Seq.map pairUp
    |> Seq.toArray

numberPairs
|> Array.take 3

#!fsharp

let unpairFolder state pair =
    let (lList, rList) = state
    let (l, r) = pair
    ( l :: lList
    , r :: rList
    )

let (leftList, rightList) =
    numberPairs
    |> Seq.fold
        unpairFolder
        (List.empty, List.empty)

let leftSorted = leftList |> List.sort
let rightSorted = rightList |> List.sort

( leftSorted |> List.take 3
, rightSorted |> List.take 3
)

#!fsharp

let pairedOrder =
    List.zip leftSorted rightSorted

let distance (pair: int*int) =
    let (l, r) = pair
    System.Math.Abs(l - r)

pairedOrder
|> Seq.map distance
|> Seq.sum

#!markdown

(...), you'll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.

#!fsharp

let getCountFor value state =
    Map.tryFind value state
    |> Option.defaultValue 0u

let countNumbers (state: Map<int, uint>) (value: int) =
    let count = getCountFor value state
    state |> Map.add value (count + 1u)

let rightCounted =
    rightSorted
    |> Seq.fold
        countNumbers
        Map.empty

( rightCounted |> Seq.take 3 |> Seq.toArray
, rightCounted |> getCountFor 42
)

#!fsharp

let rightSimilarity leftValue =
    let rightOccurrences =
        rightCounted
        |> getCountFor leftValue

    (uint leftValue) * rightOccurrences

leftSorted
|> Seq.sumBy rightSimilarity
